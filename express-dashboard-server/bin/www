#!/usr/bin/env node

global.statuses = {
	internal: [0, 0, 0],
	listener: function(val) {},
	set arr(val) {
		val.forEach( (v,i) => { this.internal[i] += v })
		this.listener(this.internal);
	},
	get arr() {
		return this.internal;
	},
	registerListener: function(listener) {
		this.listener = listener;
	}
};

global.timescale = 10.0;
global.bike_current_index = 1154185;
global.server_start_time = new Date();
const bike_start_time = new Date('2018-09-13 07:40:03');
global.bike_current_time = new Date(bike_start_time);
global.compressor_start_index = 4300 + 5000;

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dashboard:www');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

/**
 * Real-time data with socket.io
 */

const io = require('socket.io')(server);
const datasets = require('../data/datasets').datasets;
const compressors = require('../data/datasets').compressors;
const C = require('../data/constants.js').COMPRESSORS;

const emitBikeData = async socket => {
	var data = datasets['bike'];

	global.bike_current_time = new Date(bike_start_time.valueOf() + global.timescale*(new Date() - global.server_start_time));

	var new_data = [];
	for( ; global.bike_current_index < data.length; global.bike_current_index++)
	{
		var date = new Date(data[global.bike_current_index].start_time);

		if(date <= global.bike_current_time) {
			new_data.push(data[global.bike_current_index]);
		}
		else {
			break;
		}
	}

	if(new_data.length)
	{
		socket.emit("bike_data", new_data);
	}
};

const emitCompressorsData = async socket => {
	var new_data = [];
	compressors.forEach( c => {
		new_data.push({
			id: c.id,
			status: c.status,
			status_time: c.status_time
		});
	})

	if(new_data.length)
	{
		socket.emit("compressors_data", new_data);
	}
}

const emitCompressorData = async (socket, id) => {
	var c = compressors[id];

	const formatDate = require('../data/utility.js').formatDate;

	var new_data = { 
		status: c.status,
		data: []
	};

	var base_index = global.compressor_start_index + c.index_offset;
	var current_index = base_index + c.current_index;
	var start_index = base_index + c.last_sent_index;

	for(var i = start_index; i < datasets['compressor'].length; i++) {
		if(i > current_index)
		{
			break;
		}

		var data_entry = {};

		var v = datasets['compressor'][i];

		data_entry.start_time = formatDate(new Date(c.current_date.valueOf() - (current_index-i)*(150000/global.timescale)));

		data_entry.flow = +v.flow + c.flow_offset;
		data_entry.bearing_vibration = +v.bearing_vibration + c.bearing_vibration_offset;
		data_entry.oil_pressure = +v.oil_pressure + c.oil_pressure_offset;
		data_entry.oil_temp = +v.oil_temp + c.oil_temp_offset;
		data_entry.ambient_temp = +v.ambient_temp + c.ambient_temp_offset;
		data_entry.humidity = v.humidity + c.humidity_offset;

		if(c.vibration_rise_index && i > (base_index + c.vibration_rise_index))
		{
			data_entry.bearing_vibration += (i - (base_index + c.vibration_rise_index))*C.VIBRATION_RISE_SPEED;
		}
		if(c.pressure_rise_index && i > (base_index + c.pressure_rise_index))
		{
			data_entry.oil_pressure += (i - (base_index + c.pressure_rise_index))*C.PRESSURE_RISE_SPEED;
		}

		if(c.vibration_spike_index && c.vibration_spike_index == (i - (base_index)))
		{
			data_entry.bearing_vibration += C.VIBRATION_SPIKE_AMP;
		}
		if(c.pressure_spike_index && c.pressure_spike_index == (i - (base_index)))
		{
			data_entry.oil_pressure += C.PRESSURE_SPIKE_AMP;
		}

		if(c.status == 2 && c.break_index && i > (base_index + c.break_index))
		{
			data_entry.flow = 0;
			data_entry.bearing_vibration = 0;
			data_entry.oil_pressure = 1.01325;
		}

		new_data.data.push(data_entry);
	}

	c.last_sent_index = c.current_index;

	if(new_data.data.length)
	{
		socket.emit("compressor_data", new_data);
	}
};

let bike_interval;
let compressor_interval;
let compressors_interval;
io.on("connection", socket => {
	console.log("New client connected");

	// Always emit statuses on change to whoever listens
	global.statuses.registerListener(function(val) {
		io.sockets.emit("statuses", val);
	});

	socket.on('dataset', dataset => {
		switch(dataset.name)
		{
			case 'bike':
				if(bike_interval) {
					clearInterval(bike_interval);
				}
				bike_interval = setInterval(() => emitBikeData(io.sockets), 1000);
				break;

			case 'compressors':
				if(compressors_interval) {
					clearInterval(compressors_interval);
				}
				compressors_interval = setInterval(() => emitCompressorsData(io.sockets), 2500);
				break;

			case 'compressor':
				if(compressor_interval) {
					clearInterval(compressor_interval);
				}
				//TODO: Will only send data for the ID corresponding to the first connected client request.
				compressor_interval = setInterval(() => emitCompressorData(io.sockets, dataset.id), 150000/global.timescale);
				break;

			default:
				break;
		}
	});

	socket.on("disconnect", () => { console.log("Client disconnected")});
});
