#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dashboard:www');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

/**
 * Real-time data with socket.io
 */

//global.current_index = 1190043;
//const data_start_time = new Date('2018-09-19 08:56:03');
//global.current_index = 1189592;
//const data_start_time = new Date('2018-09-19 08:30:00');
global.current_index = 1154185;
const data_start_time = new Date('2018-09-13 07:40:03');

const server_start_time = new Date();
const timescale = 60.0;
global.data_current_time = new Date(data_start_time);

const io = require('socket.io')(server);
const datasets = require('../data/datasets').datasets;

const emitData = async socket => {
	var data = datasets['bike'];

	global.data_current_time = new Date(data_start_time.valueOf() + timescale*(new Date() - server_start_time));

	var new_data = [];
	for( ; global.current_index < data.length; global.current_index++)
	{
		var date = new Date(data[global.current_index].start_time);

		if(date <= global.data_current_time) {
			new_data.push(data[global.current_index]);
		}
		else {
			break;
		}
	}

	if(new_data.length)
	{
		socket.emit("data", new_data);
	}
};

let interval;
io.on("connection", socket => {
	console.log("New client connected");

	if(interval) {
		clearInterval(interval);
	}

	interval = setInterval(() => emitData(io.sockets), 1000);

	socket.on("disconnect", () => { console.log("Client disconnected")});
});
